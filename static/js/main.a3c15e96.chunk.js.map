{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["INP","x","y","OUT","REC","MEM","NON","initialEdges","f","cellType","first","second","third","push","WIDTH","window","innerWidth","HEIGHT","innerHeight","INITIAL_NODES","map","NaN","Math","sin","cos","point","isNaN","color","memory","atan","node","index","HORIZONTAL_OFFSET","floor","INITIAL_EDGES","edges","newEdges","source","target","flat","concat","filter","Boolean","Node","radius","cx","cy","r","fill","Edge","nodes","relationship","d","stroke","strokeWidth","x1","y1","x2","y2","App","useState","inProgress","setInProgress","readyToRender","setReadyToRender","canvas","useRef","useEffect","className","width","ref","height","id","offset","stopColor","edge","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3c15e96.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {\n  useState,\n  useEffect,\n  useRef,\n} from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\n\n\nconst INP = { x: 1, y: 1 };\nconst OUT = { x: 0, y: 0 };\nconst REC = { x: 1, y: 0 };\nconst MEM = { x: 0, y: 1 };\nconst NON = { x: -1, y: -1};\n\nvar radianToDegree = function (angle) {\n    return angle * 180 / Math.PI;\n};\n\nconst skipEmptyCell = ({ x, y }) =>\n  x > -1 && y > -1;\n\nconst applyToGrid = ({ x, y }) =>\n  x === -1 && y === -1 ? NaN : Math.sin(x) + Math.cos(y);\n\nconst initialEdges = [];\n\nfunction f(cellType) {\n  return (first, second, third) => {\n    initialEdges.push([first * 10, second * 10]);\n    return cellType;\n  };\n};\n\nconst WIDTH = window.innerWidth - 15;\nconst HEIGHT = window.innerHeight - 10;\nconst COLS = 7;\nconst ROWS = 7;\nconst HORIZONTAL_OFFSET = 1;\nconst VERTICAL_OFFSET = 1;\n\nfunction applyPositions(node, index) {\n  return {\n    ...node,\n    x: (((index % COLS) + (HORIZONTAL_OFFSET/2)) * (WIDTH / COLS)),\n    y: (Math.floor(index / COLS) + VERTICAL_OFFSET) * HEIGHT / ROWS,\n  };\n}\n\nconst INITIAL_NODES = [\n // 0              // 1              // 2              // 3              // 4              // 5              // 6\n f(NON)(0.0, 0.0), f(INP)(0.0, 0.4), f(REC)(1.7, 0.0), f(REC)(2.3, 2.5), f(REC)(0.0, 1.2), f(NON)(0.0, 0.0), f(NON)(0.0, 0.0),\n // 7              // 8              // 9              // 10             // 11             // 12             // 13\n f(NON)(0.0, 0.0), f(NON)(0.0, 0.0), f(NON)(0.0, 0.0), f(NON)(0.0, 0.0), f(NON)(0.0, 0.0), f(OUT)(0.0, 1.8), f(NON)(0.0, 0.0),\n // 14             // 15             // 16             // 17             // 18             // 19             // 20\n f(NON)(0.0, 0.0), f(INP)(0.2, 1.8), f(REC)(0.3, 0.1), f(REC)(0.3, 0.4), f(REC)(0.3, 0.0), f(NON)(0.0, 0.0), f(NON)(0.0, 0.0),\n // 21             // 22             // 23             // 24             // 25             // 26             // 27\n f(NON)(0.0, 0.0), f(NON)(0.0, 0.0), f(INP)(1.8, 1.7), f(NON)(0.0, 0.0), f(OUT)(1.6, 1.7), f(NON)(0.0, 0.0), f(NON)(0.0, 0.0),\n // 28             // 29             // 30             // 31             // 32             // 33             // 34\n f(MEM)(2.3, 2.5), f(MEM)(2.3, 2.5), f(MEM)(2.3, 2.5), f(MEM)(2.3, 2.5), f(MEM)(2.3, 0.0), f(MEM)(2.3, 2.5), f(MEM)(2.3, 2.5),\n // 35             // 36             // 37             // 38             // 39             // 40             // 41\n f(MEM)(2.8, 0.0), f(MEM)(2.9, 0.0), f(MEM)(0.2, 0.0), f(MEM)(3.1, 0.0), f(MEM)(0.4, 0.0), f(MEM)(3.3, 0.0), f(MEM)(3.4, 0.0), \n].map(\n  applyToGrid\n).map(\n  (point) => {\n    if (isNaN(point)) {return { ...NON, NON: true, color: 'rgba(0, 0, 0, 0.1)' }}\n\n    if (point < 1) {\n      return { ...MEM, MEM: true, color: 'blue', memory: true }\n    }\n\n    else if (point === 1) {\n      return { ...OUT, OUT: true, color: 'rgba(255, 0, 0, 0.3)' }\n    }\n\n\n    else if (Math.atan(point) > 1) {\n      return { ...REC, REC: true, color: 'rgba(0, 0, 255, 0.3)' } \n    }\n\n    else {\n      return { ...INP, INP: true, color: 'rgba(0, 255, 0, 0.3)' } \n    }\n\n  }\n).map(applyPositions);\n\nconst INITIAL_EDGES = initialEdges.map(\n  (edges, index) => {\n    const [first, second] = edges;\n    const newEdges = [];\n\n    if (first) {\n      newEdges.push({\n        source: index,\n        target: first\n      }); \n    }\n\n    if (second) {\n      newEdges.push({\n        source: index,\n        target: second\n      }); \n    }\n    return newEdges;\n  }\n).flat().concat(\n  // fill the recurrent cells\n  (\n    INITIAL_NODES\n    .map(({ REC }, index) => REC && ({\n      source: index,\n      target: index,\n    }))\n  ).filter(Boolean)\n);\n\nfunction setBounds(point, min, max) {\n  return point;\n  return (\n    Math.min(\n      Math.max(min, point),\n      max\n    )\n  );\n}\n\nfunction Node({\n  x,\n  y,\n  color,\n  memory,\n}) {\n  const radius = WIDTH / (COLS * 6);\n\n  return memory ? (\n    <circle cx={ x } cy={ y } r={ radius } fill={\"url(#memory)\"}/>\n  ) : (\n    <circle cx={ x } cy={ y } r={ radius } fill={color} />\n  );\n}\n\nfunction Edge({\n  nodes, \n  relationship,\n}) {\n  const source = nodes[relationship.source];\n  const target = nodes[relationship.target];\n\n  if (!source || !target) {\n    return;\n  }\n\n  if (relationship.source === relationship.target) {\n    return (<path d={`\n      M${source.x} ${source.y}\n      C${source.x - 30} ${source.y - 35}\n       ${source.x + 30} ${source.y - 35}\n       ${source.x} ${source.y}\n    `} stroke=\"black\" strokeWidth={2} fill=\"transparent\" />);\n  }\n\n  return (\n    <line\n      strokeWidth={ 2 }\n      stroke={ '#000' }\n      x1={ source.x }\n      y1={ source.y }\n      x2={ target.x }\n      y2={ target.y }\n    />\n  );\n}\n\nfunction App() {\n  const [nodes, setNodes] = useState(INITIAL_NODES);\n  const [edges, setEdges] = useState(INITIAL_EDGES);\n  const [tick, setTick] = useState(0);\n  const [inProgress, setInProgress] = useState(false);\n  const [readyToRender, setReadyToRender] = useState(false);\n\n  const canvas = useRef(null);\n\n  useEffect(() => {\n    if (inProgress) return;\n    // const simulation = forceSimulation(nodes)\n    // .force(\"charge\", forceManyBody())\n    // .force(\"link\", forceLink(edges).distance(2))\n    // .force(\"center\", forceCenter());\n\n    // simulation.on('tick', () => {\n    //   setTick(tick + 1);\n    //   setNodes(nodes.map((node) => ({ ...node, tick })));\n    // });\n  }, [inProgress]);\n\n  useEffect(() => {\n    setReadyToRender(true);\n  }, [nodes])\n\n  useEffect(() => {\n    setInProgress(true);\n  })\n\n  return (\n    <div className=\"App\">\n      <svg width= { WIDTH } ref={ canvas } height={ HEIGHT }>\n        <defs>\n          <radialGradient id=\"memory\">\n            <stop offset=\"0%\" stopColor=\"blue\" />\n            <stop offset=\"50%\" stopColor=\"blue\" />\n            <stop offset=\"52%\" stopColor=\"black\" />\n            <stop offset=\"54%\" stopColor=\"black\" />\n            <stop offset=\"56%\" stopColor=\"black\" />\n            <stop offset=\"58%\" stopColor=\"blue\" />\n            <stop offset=\"100%\" stopColor=\"blue\" />\n          </radialGradient>\n        </defs>\n        <g>\n        { readyToRender && edges.map((edge, index) => (\n            <Edge nodes={ nodes } relationship={ edge } key={ `edge-${index}` } />\n        ))}</g>       { nodes.map((node, index) => (\n            <Node id={ index } key={ index } { ...node } />\n          )) }\n \n      </svg>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}